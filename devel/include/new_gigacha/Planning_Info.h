// Generated by gencpp from file new_gigacha/Planning_Info.msg
// DO NOT EDIT!


#ifndef NEW_GIGACHA_MESSAGE_PLANNING_INFO_H
#define NEW_GIGACHA_MESSAGE_PLANNING_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <new_gigacha/Local.h>
#include <geometry_msgs/Point32.h>

namespace new_gigacha
{
template <class ContainerAllocator>
struct Planning_Info_
{
  typedef Planning_Info_<ContainerAllocator> Type;

  Planning_Info_()
    : mode()
    , local()
    , path_x()
    , path_y()
    , path_heading()
    , path_local_x()
    , path_local_y()
    , point()  {
    }
  Planning_Info_(const ContainerAllocator& _alloc)
    : mode(_alloc)
    , local(_alloc)
    , path_x(_alloc)
    , path_y(_alloc)
    , path_heading(_alloc)
    , path_local_x(_alloc)
    , path_local_y(_alloc)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef  ::new_gigacha::Local_<ContainerAllocator>  _local_type;
  _local_type local;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _path_x_type;
  _path_x_type path_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _path_y_type;
  _path_y_type path_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _path_heading_type;
  _path_heading_type path_heading;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _path_local_x_type;
  _path_local_x_type path_local_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _path_local_y_type;
  _path_local_y_type path_local_y;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::new_gigacha::Planning_Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::new_gigacha::Planning_Info_<ContainerAllocator> const> ConstPtr;

}; // struct Planning_Info_

typedef ::new_gigacha::Planning_Info_<std::allocator<void> > Planning_Info;

typedef boost::shared_ptr< ::new_gigacha::Planning_Info > Planning_InfoPtr;
typedef boost::shared_ptr< ::new_gigacha::Planning_Info const> Planning_InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::new_gigacha::Planning_Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::new_gigacha::Planning_Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::new_gigacha::Planning_Info_<ContainerAllocator1> & lhs, const ::new_gigacha::Planning_Info_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.local == rhs.local &&
    lhs.path_x == rhs.path_x &&
    lhs.path_y == rhs.path_y &&
    lhs.path_heading == rhs.path_heading &&
    lhs.path_local_x == rhs.path_local_x &&
    lhs.path_local_y == rhs.path_local_y &&
    lhs.point == rhs.point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::new_gigacha::Planning_Info_<ContainerAllocator1> & lhs, const ::new_gigacha::Planning_Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace new_gigacha

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::new_gigacha::Planning_Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::new_gigacha::Planning_Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::new_gigacha::Planning_Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::new_gigacha::Planning_Info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::new_gigacha::Planning_Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::new_gigacha::Planning_Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::new_gigacha::Planning_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca3fd13cb64cf71fd7e0db5debcdd949";
  }

  static const char* value(const ::new_gigacha::Planning_Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca3fd13cb64cf71fULL;
  static const uint64_t static_value2 = 0xd7e0db5debcdd949ULL;
};

template<class ContainerAllocator>
struct DataType< ::new_gigacha::Planning_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "new_gigacha/Planning_Info";
  }

  static const char* value(const ::new_gigacha::Planning_Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::new_gigacha::Planning_Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mode\n"
"Local local\n"
"float64[] path_x\n"
"float64[] path_y\n"
"float64[] path_heading\n"
"float64[] path_local_x\n"
"float64[] path_local_y\n"
"\n"
"geometry_msgs/Point32 point\n"
"\n"
"================================================================================\n"
"MSG: new_gigacha/Local\n"
"float64 x\n"
"float64 y\n"
"float64 heading\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::new_gigacha::Planning_Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::new_gigacha::Planning_Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.local);
      stream.next(m.path_x);
      stream.next(m.path_y);
      stream.next(m.path_heading);
      stream.next(m.path_local_x);
      stream.next(m.path_local_y);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Planning_Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::new_gigacha::Planning_Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::new_gigacha::Planning_Info_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "local: ";
    s << std::endl;
    Printer< ::new_gigacha::Local_<ContainerAllocator> >::stream(s, indent + "  ", v.local);
    s << indent << "path_x[]" << std::endl;
    for (size_t i = 0; i < v.path_x.size(); ++i)
    {
      s << indent << "  path_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.path_x[i]);
    }
    s << indent << "path_y[]" << std::endl;
    for (size_t i = 0; i < v.path_y.size(); ++i)
    {
      s << indent << "  path_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.path_y[i]);
    }
    s << indent << "path_heading[]" << std::endl;
    for (size_t i = 0; i < v.path_heading.size(); ++i)
    {
      s << indent << "  path_heading[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.path_heading[i]);
    }
    s << indent << "path_local_x[]" << std::endl;
    for (size_t i = 0; i < v.path_local_x.size(); ++i)
    {
      s << indent << "  path_local_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.path_local_x[i]);
    }
    s << indent << "path_local_y[]" << std::endl;
    for (size_t i = 0; i < v.path_local_y.size(); ++i)
    {
      s << indent << "  path_local_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.path_local_y[i]);
    }
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEW_GIGACHA_MESSAGE_PLANNING_INFO_H
